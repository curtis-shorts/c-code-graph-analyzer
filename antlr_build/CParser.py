# Generated from C.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,122,1236,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,1,0,1,0,1,0,4,0,194,8,0,11,0,12,
        0,195,1,0,1,0,1,0,1,0,1,0,1,0,3,0,204,8,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,224,8,0,1,
        1,1,1,1,2,1,2,1,2,3,2,231,8,2,1,2,1,2,1,2,3,2,236,8,2,1,3,5,3,239,
        8,3,10,3,12,3,242,9,3,1,3,1,3,5,3,246,8,3,10,3,12,3,249,9,3,1,4,
        1,4,1,4,3,4,254,8,4,1,4,1,4,3,4,258,8,4,1,5,1,5,1,5,3,5,263,8,5,
        5,5,265,8,5,10,5,12,5,268,9,5,1,6,1,6,5,6,272,8,6,10,6,12,6,275,
        9,6,1,6,1,6,1,6,1,6,4,6,281,8,6,11,6,12,6,282,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,296,8,6,1,6,1,6,3,6,300,8,6,1,6,3,
        6,303,8,6,1,6,3,6,306,8,6,4,6,308,8,6,11,6,12,6,309,1,6,1,6,3,6,
        314,8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,328,
        8,9,10,9,12,9,331,9,9,1,10,1,10,3,10,335,8,10,1,10,1,10,1,10,1,11,
        1,11,3,11,342,8,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,350,8,11,1,
        11,1,11,3,11,354,8,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,362,8,11,
        1,11,1,11,1,11,1,11,1,11,5,11,369,8,11,10,11,12,11,372,9,11,1,12,
        1,12,1,12,5,12,377,8,12,10,12,12,12,380,9,12,1,13,5,13,383,8,13,
        10,13,12,13,386,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,3,13,399,8,13,1,14,1,14,1,15,3,15,404,8,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,3,15,413,8,15,1,16,1,16,1,16,5,16,418,8,16,
        10,16,12,16,421,9,16,1,17,1,17,1,17,5,17,426,8,17,10,17,12,17,429,
        9,17,1,18,1,18,1,18,5,18,434,8,18,10,18,12,18,437,9,18,1,19,1,19,
        1,19,5,19,442,8,19,10,19,12,19,445,9,19,1,20,1,20,1,20,5,20,450,
        8,20,10,20,12,20,453,9,20,1,21,1,21,1,21,5,21,458,8,21,10,21,12,
        21,461,9,21,1,22,1,22,1,22,5,22,466,8,22,10,22,12,22,469,9,22,1,
        23,1,23,1,23,5,23,474,8,23,10,23,12,23,477,9,23,1,24,1,24,1,24,5,
        24,482,8,24,10,24,12,24,485,9,24,1,25,1,25,1,25,5,25,490,8,25,10,
        25,12,25,493,9,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,501,8,26,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,512,8,27,1,28,1,
        28,1,29,1,29,1,29,5,29,519,8,29,10,29,12,29,522,9,29,1,30,1,30,1,
        31,1,31,3,31,528,8,31,1,31,1,31,1,31,3,31,533,8,31,1,32,4,32,536,
        8,32,11,32,12,32,537,1,33,4,33,541,8,33,11,33,12,33,542,1,34,1,34,
        1,34,1,34,1,34,3,34,550,8,34,1,35,1,35,1,35,5,35,555,8,35,10,35,
        12,35,558,9,35,1,36,1,36,1,36,3,36,563,8,36,1,37,1,37,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
        594,8,38,1,39,1,39,3,39,598,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,3,39,607,8,39,1,40,1,40,1,41,4,41,612,8,41,11,41,12,41,613,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,624,8,42,1,43,1,43,3,
        43,628,8,43,1,43,3,43,631,8,43,1,44,1,44,1,44,5,44,636,8,44,10,44,
        12,44,639,9,44,1,45,1,45,3,45,643,8,45,1,45,1,45,3,45,647,8,45,1,
        46,1,46,3,46,651,8,46,1,46,1,46,1,46,3,46,656,8,46,1,46,1,46,1,46,
        1,46,3,46,662,8,46,1,47,1,47,1,47,5,47,667,8,47,10,47,12,47,670,
        9,47,1,48,1,48,1,48,3,48,675,8,48,1,49,1,49,1,50,1,50,1,50,1,50,
        1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
        695,8,52,1,53,1,53,1,53,1,53,3,53,701,8,53,1,53,1,53,1,54,3,54,706,
        8,54,1,54,1,54,5,54,710,8,54,10,54,12,54,713,9,54,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,3,55,732,8,55,1,55,1,55,1,55,3,55,737,8,55,1,55,3,55,740,8,
        55,1,55,1,55,1,55,1,55,1,55,3,55,747,8,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,762,8,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,774,8,55,1,55,5,
        55,777,8,55,10,55,12,55,780,9,55,1,56,1,56,1,57,1,57,1,57,4,57,787,
        8,57,11,57,12,57,788,1,57,1,57,3,57,793,8,57,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,59,3,59,803,8,59,1,59,1,59,3,59,807,8,59,5,59,809,
        8,59,10,59,12,59,812,9,59,1,60,1,60,1,60,3,60,817,8,60,1,60,3,60,
        820,8,60,1,61,1,61,1,61,1,61,1,61,5,61,827,8,61,10,61,12,61,830,
        9,61,1,62,1,62,3,62,834,8,62,4,62,836,8,62,11,62,12,62,837,1,63,
        4,63,841,8,63,11,63,12,63,842,1,64,1,64,1,64,3,64,848,8,64,1,65,
        1,65,3,65,852,8,65,1,65,1,65,3,65,856,8,65,1,65,5,65,859,8,65,10,
        65,12,65,862,9,65,1,66,1,66,1,66,1,66,1,66,3,66,869,8,66,3,66,871,
        8,66,1,67,1,67,1,67,5,67,876,8,67,10,67,12,67,879,9,67,1,68,1,68,
        3,68,883,8,68,1,69,1,69,3,69,887,8,69,1,69,1,69,5,69,891,8,69,10,
        69,12,69,894,9,69,3,69,896,8,69,1,70,1,70,1,70,1,70,1,70,5,70,903,
        8,70,10,70,12,70,906,9,70,1,70,1,70,3,70,910,8,70,1,70,3,70,913,
        8,70,1,70,1,70,1,70,1,70,3,70,919,8,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,935,8,70,1,70,
        1,70,5,70,939,8,70,10,70,12,70,942,9,70,3,70,944,8,70,1,70,1,70,
        1,70,3,70,949,8,70,1,70,3,70,952,8,70,1,70,1,70,1,70,1,70,1,70,3,
        70,959,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,978,8,70,1,70,1,70,5,70,982,
        8,70,10,70,12,70,985,9,70,5,70,987,8,70,10,70,12,70,990,9,70,1,71,
        1,71,1,71,1,71,1,71,3,71,997,8,71,1,72,1,72,1,72,3,72,1002,8,72,
        1,72,3,72,1005,8,72,1,72,3,72,1008,8,72,1,73,3,73,1011,8,73,1,73,
        1,73,1,73,3,73,1016,8,73,1,73,5,73,1019,8,73,10,73,12,73,1022,9,
        73,1,74,1,74,1,74,1,75,4,75,1028,8,75,11,75,12,75,1029,1,76,1,76,
        1,76,1,76,1,76,1,76,3,76,1038,8,76,1,77,1,77,1,77,1,77,1,77,4,77,
        1045,8,77,11,77,12,77,1046,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,1064,8,78,10,78,12,78,
        1067,9,78,3,78,1069,8,78,1,78,1,78,1,78,1,78,5,78,1075,8,78,10,78,
        12,78,1078,9,78,3,78,1080,8,78,5,78,1082,8,78,10,78,12,78,1085,9,
        78,1,78,1,78,3,78,1089,8,78,1,79,1,79,1,79,3,79,1094,8,79,1,79,1,
        79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1104,8,79,1,80,1,80,3,80,1108,
        8,80,1,80,1,80,1,81,4,81,1113,8,81,11,81,12,81,1114,1,82,1,82,1,
        82,3,82,1120,8,82,1,83,3,83,1123,8,83,1,83,1,83,1,84,1,84,1,84,1,
        84,1,84,1,84,1,84,3,84,1134,8,84,1,84,1,84,1,84,1,84,1,84,1,84,3,
        84,1142,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1164,8,85,1,
        86,1,86,3,86,1168,8,86,3,86,1170,8,86,1,86,1,86,3,86,1174,8,86,1,
        86,1,86,3,86,1178,8,86,1,87,1,87,3,87,1182,8,87,1,88,1,88,1,88,5,
        88,1187,8,88,10,88,12,88,1190,9,88,1,89,1,89,1,89,1,89,1,89,1,89,
        3,89,1198,8,89,1,89,1,89,3,89,1202,8,89,1,89,1,89,1,90,3,90,1207,
        8,90,1,90,1,90,1,91,4,91,1212,8,91,11,91,12,91,1213,1,92,1,92,1,
        92,1,92,3,92,1220,8,92,1,93,3,93,1223,8,93,1,93,1,93,3,93,1227,8,
        93,1,93,1,93,1,94,4,94,1232,8,94,11,94,12,94,1233,1,94,0,2,110,140,
        95,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,0,21,9,0,4,4,72,75,78,82,85,85,87,87,90,91,96,96,107,107,109,
        109,1,0,109,110,3,0,46,46,79,79,81,81,2,0,46,46,57,57,5,0,78,78,
        80,80,82,82,85,85,90,91,1,0,82,84,2,0,78,78,80,80,1,0,76,77,1,0,
        72,75,1,0,107,108,1,0,96,106,6,0,22,22,33,33,41,41,47,47,50,50,65,
        65,1,0,5,7,2,0,48,48,51,51,4,0,26,26,42,42,54,54,58,58,2,0,10,10,
        12,16,2,0,66,67,95,95,1,0,66,67,2,0,82,82,89,89,2,0,17,17,19,19,
        2,0,20,20,54,54,1376,0,223,1,0,0,0,2,225,1,0,0,0,4,227,1,0,0,0,6,
        240,1,0,0,0,8,250,1,0,0,0,10,259,1,0,0,0,12,313,1,0,0,0,14,315,1,
        0,0,0,16,317,1,0,0,0,18,324,1,0,0,0,20,334,1,0,0,0,22,353,1,0,0,
        0,24,373,1,0,0,0,26,384,1,0,0,0,28,400,1,0,0,0,30,412,1,0,0,0,32,
        414,1,0,0,0,34,422,1,0,0,0,36,430,1,0,0,0,38,438,1,0,0,0,40,446,
        1,0,0,0,42,454,1,0,0,0,44,462,1,0,0,0,46,470,1,0,0,0,48,478,1,0,
        0,0,50,486,1,0,0,0,52,494,1,0,0,0,54,511,1,0,0,0,56,513,1,0,0,0,
        58,515,1,0,0,0,60,523,1,0,0,0,62,532,1,0,0,0,64,535,1,0,0,0,66,540,
        1,0,0,0,68,549,1,0,0,0,70,551,1,0,0,0,72,559,1,0,0,0,74,564,1,0,
        0,0,76,593,1,0,0,0,78,606,1,0,0,0,80,608,1,0,0,0,82,611,1,0,0,0,
        84,623,1,0,0,0,86,627,1,0,0,0,88,632,1,0,0,0,90,646,1,0,0,0,92,661,
        1,0,0,0,94,663,1,0,0,0,96,671,1,0,0,0,98,676,1,0,0,0,100,678,1,0,
        0,0,102,683,1,0,0,0,104,694,1,0,0,0,106,696,1,0,0,0,108,705,1,0,
        0,0,110,731,1,0,0,0,112,781,1,0,0,0,114,792,1,0,0,0,116,794,1,0,
        0,0,118,802,1,0,0,0,120,813,1,0,0,0,122,828,1,0,0,0,124,835,1,0,
        0,0,126,840,1,0,0,0,128,844,1,0,0,0,130,849,1,0,0,0,132,870,1,0,
        0,0,134,872,1,0,0,0,136,880,1,0,0,0,138,895,1,0,0,0,140,943,1,0,
        0,0,142,996,1,0,0,0,144,1007,1,0,0,0,146,1010,1,0,0,0,148,1023,1,
        0,0,0,150,1027,1,0,0,0,152,1037,1,0,0,0,154,1039,1,0,0,0,156,1088,
        1,0,0,0,158,1103,1,0,0,0,160,1105,1,0,0,0,162,1112,1,0,0,0,164,1119,
        1,0,0,0,166,1122,1,0,0,0,168,1141,1,0,0,0,170,1163,1,0,0,0,172,1169,
        1,0,0,0,174,1179,1,0,0,0,176,1183,1,0,0,0,178,1201,1,0,0,0,180,1206,
        1,0,0,0,182,1211,1,0,0,0,184,1219,1,0,0,0,186,1222,1,0,0,0,188,1231,
        1,0,0,0,190,224,5,112,0,0,191,224,5,113,0,0,192,194,5,115,0,0,193,
        192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,
        224,1,0,0,0,197,198,5,66,0,0,198,199,3,58,29,0,199,200,5,67,0,0,
        200,224,1,0,0,0,201,224,3,16,8,0,202,204,5,1,0,0,203,202,1,0,0,0,
        203,204,1,0,0,0,204,205,1,0,0,0,205,206,5,66,0,0,206,207,3,160,80,
        0,207,208,5,67,0,0,208,224,1,0,0,0,209,210,5,2,0,0,210,211,5,66,
        0,0,211,212,3,26,13,0,212,213,5,95,0,0,213,214,3,136,68,0,214,215,
        5,67,0,0,215,224,1,0,0,0,216,217,5,3,0,0,217,218,5,66,0,0,218,219,
        3,136,68,0,219,220,5,95,0,0,220,221,3,26,13,0,221,222,5,67,0,0,222,
        224,1,0,0,0,223,190,1,0,0,0,223,191,1,0,0,0,223,193,1,0,0,0,223,
        197,1,0,0,0,223,201,1,0,0,0,223,203,1,0,0,0,223,209,1,0,0,0,223,
        216,1,0,0,0,224,1,1,0,0,0,225,226,5,112,0,0,226,3,1,0,0,0,227,228,
        3,2,1,0,228,230,5,66,0,0,229,231,3,10,5,0,230,229,1,0,0,0,230,231,
        1,0,0,0,231,232,1,0,0,0,232,235,5,67,0,0,233,236,3,160,80,0,234,
        236,5,94,0,0,235,233,1,0,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,
        5,1,0,0,0,237,239,5,115,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,
        238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,
        247,5,112,0,0,244,246,5,115,0,0,245,244,1,0,0,0,246,249,1,0,0,0,
        247,245,1,0,0,0,247,248,1,0,0,0,248,7,1,0,0,0,249,247,1,0,0,0,250,
        251,3,2,1,0,251,253,5,66,0,0,252,254,3,10,5,0,253,252,1,0,0,0,253,
        254,1,0,0,0,254,255,1,0,0,0,255,257,5,67,0,0,256,258,5,94,0,0,257,
        256,1,0,0,0,257,258,1,0,0,0,258,9,1,0,0,0,259,266,3,12,6,0,260,262,
        5,95,0,0,261,263,3,12,6,0,262,261,1,0,0,0,262,263,1,0,0,0,263,265,
        1,0,0,0,264,260,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,
        1,0,0,0,267,11,1,0,0,0,268,266,1,0,0,0,269,273,3,76,38,0,270,272,
        5,82,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,
        1,0,0,0,274,314,1,0,0,0,275,273,1,0,0,0,276,314,3,132,66,0,277,314,
        5,112,0,0,278,314,5,113,0,0,279,281,5,115,0,0,280,279,1,0,0,0,281,
        282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,314,1,0,0,0,284,
        314,3,8,4,0,285,286,5,70,0,0,286,287,3,76,38,0,287,288,5,94,0,0,
        288,289,5,71,0,0,289,314,1,0,0,0,290,314,3,58,29,0,291,314,3,14,
        7,0,292,314,3,160,80,0,293,295,5,43,0,0,294,296,3,12,6,0,295,294,
        1,0,0,0,295,296,1,0,0,0,296,314,1,0,0,0,297,299,5,115,0,0,298,300,
        5,21,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,303,
        3,76,38,0,302,301,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,306,
        5,21,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,297,
        1,0,0,0,308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,314,
        1,0,0,0,311,312,5,36,0,0,312,314,5,112,0,0,313,269,1,0,0,0,313,276,
        1,0,0,0,313,277,1,0,0,0,313,278,1,0,0,0,313,280,1,0,0,0,313,284,
        1,0,0,0,313,285,1,0,0,0,313,290,1,0,0,0,313,291,1,0,0,0,313,292,
        1,0,0,0,313,293,1,0,0,0,313,307,1,0,0,0,313,311,1,0,0,0,314,13,1,
        0,0,0,315,316,7,0,0,0,316,15,1,0,0,0,317,318,5,61,0,0,318,319,5,
        66,0,0,319,320,3,54,27,0,320,321,5,95,0,0,321,322,3,18,9,0,322,323,
        5,67,0,0,323,17,1,0,0,0,324,329,3,20,10,0,325,326,5,95,0,0,326,328,
        3,20,10,0,327,325,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,330,
        1,0,0,0,330,19,1,0,0,0,331,329,1,0,0,0,332,335,3,136,68,0,333,335,
        5,28,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,337,
        5,93,0,0,337,338,3,54,27,0,338,21,1,0,0,0,339,354,3,0,0,0,340,342,
        5,1,0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,344,
        5,66,0,0,344,345,3,136,68,0,345,346,5,67,0,0,346,347,5,70,0,0,347,
        349,3,146,73,0,348,350,5,95,0,0,349,348,1,0,0,0,349,350,1,0,0,0,
        350,351,1,0,0,0,351,352,5,71,0,0,352,354,1,0,0,0,353,339,1,0,0,0,
        353,341,1,0,0,0,354,370,1,0,0,0,355,356,5,68,0,0,356,357,3,58,29,
        0,357,358,5,69,0,0,358,369,1,0,0,0,359,361,5,66,0,0,360,362,3,24,
        12,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,369,5,67,
        0,0,364,365,7,1,0,0,365,369,5,112,0,0,366,369,5,79,0,0,367,369,5,
        81,0,0,368,355,1,0,0,0,368,359,1,0,0,0,368,364,1,0,0,0,368,366,1,
        0,0,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,
        0,0,0,371,23,1,0,0,0,372,370,1,0,0,0,373,378,3,54,27,0,374,375,5,
        95,0,0,375,377,3,54,27,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,
        1,0,0,0,378,379,1,0,0,0,379,25,1,0,0,0,380,378,1,0,0,0,381,383,7,
        2,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,
        0,0,0,385,398,1,0,0,0,386,384,1,0,0,0,387,399,3,22,11,0,388,389,
        3,28,14,0,389,390,3,30,15,0,390,399,1,0,0,0,391,392,7,3,0,0,392,
        393,5,66,0,0,393,394,3,136,68,0,394,395,5,67,0,0,395,399,1,0,0,0,
        396,397,5,87,0,0,397,399,5,112,0,0,398,387,1,0,0,0,398,388,1,0,0,
        0,398,391,1,0,0,0,398,396,1,0,0,0,399,27,1,0,0,0,400,401,7,4,0,0,
        401,29,1,0,0,0,402,404,5,1,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,
        405,1,0,0,0,405,406,5,66,0,0,406,407,3,136,68,0,407,408,5,67,0,0,
        408,409,3,30,15,0,409,413,1,0,0,0,410,413,3,26,13,0,411,413,5,114,
        0,0,412,403,1,0,0,0,412,410,1,0,0,0,412,411,1,0,0,0,413,31,1,0,0,
        0,414,419,3,30,15,0,415,416,7,5,0,0,416,418,3,30,15,0,417,415,1,
        0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,33,1,0,
        0,0,421,419,1,0,0,0,422,427,3,32,16,0,423,424,7,6,0,0,424,426,3,
        32,16,0,425,423,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,
        1,0,0,0,428,35,1,0,0,0,429,427,1,0,0,0,430,435,3,34,17,0,431,432,
        7,7,0,0,432,434,3,34,17,0,433,431,1,0,0,0,434,437,1,0,0,0,435,433,
        1,0,0,0,435,436,1,0,0,0,436,37,1,0,0,0,437,435,1,0,0,0,438,443,3,
        36,18,0,439,440,7,8,0,0,440,442,3,36,18,0,441,439,1,0,0,0,442,445,
        1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,39,1,0,0,0,445,443,1,
        0,0,0,446,451,3,38,19,0,447,448,7,9,0,0,448,450,3,38,19,0,449,447,
        1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,41,1,
        0,0,0,453,451,1,0,0,0,454,459,3,40,20,0,455,456,5,85,0,0,456,458,
        3,40,20,0,457,455,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,
        1,0,0,0,460,43,1,0,0,0,461,459,1,0,0,0,462,467,3,42,21,0,463,464,
        5,89,0,0,464,466,3,42,21,0,465,463,1,0,0,0,466,469,1,0,0,0,467,465,
        1,0,0,0,467,468,1,0,0,0,468,45,1,0,0,0,469,467,1,0,0,0,470,475,3,
        44,22,0,471,472,5,86,0,0,472,474,3,44,22,0,473,471,1,0,0,0,474,477,
        1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,47,1,0,0,0,477,475,1,
        0,0,0,478,483,3,46,23,0,479,480,5,87,0,0,480,482,3,46,23,0,481,479,
        1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,49,1,
        0,0,0,485,483,1,0,0,0,486,491,3,48,24,0,487,488,5,88,0,0,488,490,
        3,48,24,0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,
        1,0,0,0,492,51,1,0,0,0,493,491,1,0,0,0,494,500,3,50,25,0,495,496,
        5,92,0,0,496,497,3,58,29,0,497,498,5,93,0,0,498,499,3,52,26,0,499,
        501,1,0,0,0,500,495,1,0,0,0,500,501,1,0,0,0,501,53,1,0,0,0,502,512,
        3,52,26,0,503,504,3,26,13,0,504,505,3,56,28,0,505,506,3,54,27,0,
        506,512,1,0,0,0,507,512,5,114,0,0,508,512,3,8,4,0,509,512,3,4,2,
        0,510,512,3,6,3,0,511,502,1,0,0,0,511,503,1,0,0,0,511,507,1,0,0,
        0,511,508,1,0,0,0,511,509,1,0,0,0,511,510,1,0,0,0,512,55,1,0,0,0,
        513,514,7,10,0,0,514,57,1,0,0,0,515,520,3,54,27,0,516,517,5,95,0,
        0,517,519,3,54,27,0,518,516,1,0,0,0,519,522,1,0,0,0,520,518,1,0,
        0,0,520,521,1,0,0,0,521,59,1,0,0,0,522,520,1,0,0,0,523,524,3,52,
        26,0,524,61,1,0,0,0,525,527,3,64,32,0,526,528,3,70,35,0,527,526,
        1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,5,94,0,0,530,533,
        1,0,0,0,531,533,3,154,77,0,532,525,1,0,0,0,532,531,1,0,0,0,533,63,
        1,0,0,0,534,536,3,68,34,0,535,534,1,0,0,0,536,537,1,0,0,0,537,535,
        1,0,0,0,537,538,1,0,0,0,538,65,1,0,0,0,539,541,3,68,34,0,540,539,
        1,0,0,0,541,542,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,67,1,
        0,0,0,544,550,3,74,37,0,545,550,3,76,38,0,546,550,3,102,51,0,547,
        550,3,104,52,0,548,550,3,106,53,0,549,544,1,0,0,0,549,545,1,0,0,
        0,549,546,1,0,0,0,549,547,1,0,0,0,549,548,1,0,0,0,550,69,1,0,0,0,
        551,556,3,72,36,0,552,553,5,95,0,0,553,555,3,72,36,0,554,552,1,0,
        0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,71,1,0,0,
        0,558,556,1,0,0,0,559,562,3,108,54,0,560,561,5,96,0,0,561,563,3,
        144,72,0,562,560,1,0,0,0,562,563,1,0,0,0,563,73,1,0,0,0,564,565,
        7,11,0,0,565,75,1,0,0,0,566,594,5,53,0,0,567,594,5,25,0,0,568,594,
        5,44,0,0,569,594,5,39,0,0,570,594,5,40,0,0,571,594,5,34,0,0,572,
        594,5,30,0,0,573,594,5,45,0,0,574,594,5,52,0,0,575,594,5,59,0,0,
        576,594,5,60,0,0,577,594,5,5,0,0,578,594,5,6,0,0,579,594,5,7,0,0,
        580,581,5,1,0,0,581,582,5,66,0,0,582,583,7,12,0,0,583,594,5,67,0,
        0,584,594,3,100,50,0,585,594,3,78,39,0,586,594,3,92,46,0,587,594,
        3,142,71,0,588,589,5,8,0,0,589,590,5,66,0,0,590,591,3,60,30,0,591,
        592,5,67,0,0,592,594,1,0,0,0,593,566,1,0,0,0,593,567,1,0,0,0,593,
        568,1,0,0,0,593,569,1,0,0,0,593,570,1,0,0,0,593,571,1,0,0,0,593,
        572,1,0,0,0,593,573,1,0,0,0,593,574,1,0,0,0,593,575,1,0,0,0,593,
        576,1,0,0,0,593,577,1,0,0,0,593,578,1,0,0,0,593,579,1,0,0,0,593,
        580,1,0,0,0,593,584,1,0,0,0,593,585,1,0,0,0,593,586,1,0,0,0,593,
        587,1,0,0,0,593,588,1,0,0,0,594,77,1,0,0,0,595,597,3,80,40,0,596,
        598,5,112,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,
        600,5,70,0,0,600,601,3,82,41,0,601,602,5,71,0,0,602,607,1,0,0,0,
        603,604,3,80,40,0,604,605,5,112,0,0,605,607,1,0,0,0,606,595,1,0,
        0,0,606,603,1,0,0,0,607,79,1,0,0,0,608,609,7,13,0,0,609,81,1,0,0,
        0,610,612,3,84,42,0,611,610,1,0,0,0,612,613,1,0,0,0,613,611,1,0,
        0,0,613,614,1,0,0,0,614,83,1,0,0,0,615,616,3,86,43,0,616,617,3,88,
        44,0,617,618,5,94,0,0,618,624,1,0,0,0,619,620,3,86,43,0,620,621,
        5,94,0,0,621,624,1,0,0,0,622,624,3,154,77,0,623,615,1,0,0,0,623,
        619,1,0,0,0,623,622,1,0,0,0,624,85,1,0,0,0,625,628,3,76,38,0,626,
        628,3,102,51,0,627,625,1,0,0,0,627,626,1,0,0,0,628,630,1,0,0,0,629,
        631,3,86,43,0,630,629,1,0,0,0,630,631,1,0,0,0,631,87,1,0,0,0,632,
        637,3,90,45,0,633,634,5,95,0,0,634,636,3,90,45,0,635,633,1,0,0,0,
        636,639,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,89,1,0,0,0,639,
        637,1,0,0,0,640,647,3,108,54,0,641,643,3,108,54,0,642,641,1,0,0,
        0,642,643,1,0,0,0,643,644,1,0,0,0,644,645,5,93,0,0,645,647,3,60,
        30,0,646,640,1,0,0,0,646,642,1,0,0,0,647,91,1,0,0,0,648,650,5,32,
        0,0,649,651,5,112,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,
        0,0,0,652,653,5,70,0,0,653,655,3,94,47,0,654,656,5,95,0,0,655,654,
        1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,5,71,0,0,658,662,
        1,0,0,0,659,660,5,32,0,0,660,662,5,112,0,0,661,648,1,0,0,0,661,659,
        1,0,0,0,662,93,1,0,0,0,663,668,3,96,48,0,664,665,5,95,0,0,665,667,
        3,96,48,0,666,664,1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,
        1,0,0,0,669,95,1,0,0,0,670,668,1,0,0,0,671,674,3,98,49,0,672,673,
        5,96,0,0,673,675,3,60,30,0,674,672,1,0,0,0,674,675,1,0,0,0,675,97,
        1,0,0,0,676,677,5,112,0,0,677,99,1,0,0,0,678,679,5,58,0,0,679,680,
        5,66,0,0,680,681,3,136,68,0,681,682,5,67,0,0,682,101,1,0,0,0,683,
        684,7,14,0,0,684,103,1,0,0,0,685,695,5,38,0,0,686,695,5,63,0,0,687,
        695,5,9,0,0,688,695,5,10,0,0,689,695,3,116,58,0,690,691,5,11,0,0,
        691,692,5,66,0,0,692,693,5,112,0,0,693,695,5,67,0,0,694,685,1,0,
        0,0,694,686,1,0,0,0,694,687,1,0,0,0,694,688,1,0,0,0,694,689,1,0,
        0,0,694,690,1,0,0,0,695,105,1,0,0,0,696,697,5,56,0,0,697,700,5,66,
        0,0,698,701,3,136,68,0,699,701,3,60,30,0,700,698,1,0,0,0,700,699,
        1,0,0,0,701,702,1,0,0,0,702,703,5,67,0,0,703,107,1,0,0,0,704,706,
        3,124,62,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,711,
        3,110,55,0,708,710,3,114,57,0,709,708,1,0,0,0,710,713,1,0,0,0,711,
        709,1,0,0,0,711,712,1,0,0,0,712,109,1,0,0,0,713,711,1,0,0,0,714,
        715,6,55,-1,0,715,732,5,112,0,0,716,717,5,66,0,0,717,718,3,108,54,
        0,718,719,5,67,0,0,719,732,1,0,0,0,720,721,5,112,0,0,721,722,5,93,
        0,0,722,732,5,114,0,0,723,724,3,112,56,0,724,725,5,112,0,0,725,732,
        1,0,0,0,726,727,5,66,0,0,727,728,3,112,56,0,728,729,3,108,54,0,729,
        730,5,67,0,0,730,732,1,0,0,0,731,714,1,0,0,0,731,716,1,0,0,0,731,
        720,1,0,0,0,731,723,1,0,0,0,731,726,1,0,0,0,732,778,1,0,0,0,733,
        734,10,9,0,0,734,736,5,68,0,0,735,737,3,126,63,0,736,735,1,0,0,0,
        736,737,1,0,0,0,737,739,1,0,0,0,738,740,3,54,27,0,739,738,1,0,0,
        0,739,740,1,0,0,0,740,741,1,0,0,0,741,777,5,69,0,0,742,743,10,8,
        0,0,743,744,5,68,0,0,744,746,5,47,0,0,745,747,3,126,63,0,746,745,
        1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,749,3,54,27,0,749,750,
        5,69,0,0,750,777,1,0,0,0,751,752,10,7,0,0,752,753,5,68,0,0,753,754,
        3,126,63,0,754,755,5,47,0,0,755,756,3,54,27,0,756,757,5,69,0,0,757,
        777,1,0,0,0,758,759,10,6,0,0,759,761,5,68,0,0,760,762,3,126,63,0,
        761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,764,5,82,0,0,
        764,777,5,69,0,0,765,766,10,5,0,0,766,767,5,66,0,0,767,768,3,128,
        64,0,768,769,5,67,0,0,769,777,1,0,0,0,770,771,10,4,0,0,771,773,5,
        66,0,0,772,774,3,134,67,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,
        1,0,0,0,775,777,5,67,0,0,776,733,1,0,0,0,776,742,1,0,0,0,776,751,
        1,0,0,0,776,758,1,0,0,0,776,765,1,0,0,0,776,770,1,0,0,0,777,780,
        1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,111,1,0,0,0,780,778,
        1,0,0,0,781,782,7,15,0,0,782,113,1,0,0,0,783,784,5,17,0,0,784,786,
        5,66,0,0,785,787,5,115,0,0,786,785,1,0,0,0,787,788,1,0,0,0,788,786,
        1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,793,5,67,0,0,791,793,
        3,116,58,0,792,783,1,0,0,0,792,791,1,0,0,0,793,115,1,0,0,0,794,795,
        5,18,0,0,795,796,5,66,0,0,796,797,5,66,0,0,797,798,3,118,59,0,798,
        799,5,67,0,0,799,800,5,67,0,0,800,117,1,0,0,0,801,803,3,120,60,0,
        802,801,1,0,0,0,802,803,1,0,0,0,803,810,1,0,0,0,804,806,5,95,0,0,
        805,807,3,120,60,0,806,805,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,
        0,808,804,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,
        0,811,119,1,0,0,0,812,810,1,0,0,0,813,819,8,16,0,0,814,816,5,66,
        0,0,815,817,3,24,12,0,816,815,1,0,0,0,816,817,1,0,0,0,817,818,1,
        0,0,0,818,820,5,67,0,0,819,814,1,0,0,0,819,820,1,0,0,0,820,121,1,
        0,0,0,821,827,8,17,0,0,822,823,5,66,0,0,823,824,3,122,61,0,824,825,
        5,67,0,0,825,827,1,0,0,0,826,821,1,0,0,0,826,822,1,0,0,0,827,830,
        1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,123,1,0,0,0,830,828,
        1,0,0,0,831,833,7,18,0,0,832,834,3,126,63,0,833,832,1,0,0,0,833,
        834,1,0,0,0,834,836,1,0,0,0,835,831,1,0,0,0,836,837,1,0,0,0,837,
        835,1,0,0,0,837,838,1,0,0,0,838,125,1,0,0,0,839,841,3,102,51,0,840,
        839,1,0,0,0,841,842,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,
        127,1,0,0,0,844,847,3,130,65,0,845,846,5,95,0,0,846,848,5,111,0,
        0,847,845,1,0,0,0,847,848,1,0,0,0,848,129,1,0,0,0,849,860,3,132,
        66,0,850,852,5,67,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,1,
        0,0,0,853,855,5,95,0,0,854,856,5,66,0,0,855,854,1,0,0,0,855,856,
        1,0,0,0,856,857,1,0,0,0,857,859,3,132,66,0,858,851,1,0,0,0,859,862,
        1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,131,1,0,0,0,862,860,
        1,0,0,0,863,864,3,64,32,0,864,865,3,108,54,0,865,871,1,0,0,0,866,
        868,3,66,33,0,867,869,3,138,69,0,868,867,1,0,0,0,868,869,1,0,0,0,
        869,871,1,0,0,0,870,863,1,0,0,0,870,866,1,0,0,0,871,133,1,0,0,0,
        872,877,5,112,0,0,873,874,5,95,0,0,874,876,5,112,0,0,875,873,1,0,
        0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,135,1,0,
        0,0,879,877,1,0,0,0,880,882,3,86,43,0,881,883,3,138,69,0,882,881,
        1,0,0,0,882,883,1,0,0,0,883,137,1,0,0,0,884,896,3,124,62,0,885,887,
        3,124,62,0,886,885,1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,892,
        3,140,70,0,889,891,3,114,57,0,890,889,1,0,0,0,891,894,1,0,0,0,892,
        890,1,0,0,0,892,893,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,895,
        884,1,0,0,0,895,886,1,0,0,0,896,139,1,0,0,0,897,898,6,70,-1,0,898,
        899,5,66,0,0,899,900,3,138,69,0,900,904,5,67,0,0,901,903,3,114,57,
        0,902,901,1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,
        0,905,944,1,0,0,0,906,904,1,0,0,0,907,909,5,68,0,0,908,910,3,126,
        63,0,909,908,1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,911,913,3,54,
        27,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,944,5,69,
        0,0,915,916,5,68,0,0,916,918,5,47,0,0,917,919,3,126,63,0,918,917,
        1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,921,3,54,27,0,921,922,
        5,69,0,0,922,944,1,0,0,0,923,924,5,68,0,0,924,925,3,126,63,0,925,
        926,5,47,0,0,926,927,3,54,27,0,927,928,5,69,0,0,928,944,1,0,0,0,
        929,930,5,68,0,0,930,931,5,82,0,0,931,944,5,69,0,0,932,934,5,66,
        0,0,933,935,3,128,64,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,
        0,0,0,936,940,5,67,0,0,937,939,3,114,57,0,938,937,1,0,0,0,939,942,
        1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,944,1,0,0,0,942,940,
        1,0,0,0,943,897,1,0,0,0,943,907,1,0,0,0,943,915,1,0,0,0,943,923,
        1,0,0,0,943,929,1,0,0,0,943,932,1,0,0,0,944,988,1,0,0,0,945,946,
        10,5,0,0,946,948,5,68,0,0,947,949,3,126,63,0,948,947,1,0,0,0,948,
        949,1,0,0,0,949,951,1,0,0,0,950,952,3,54,27,0,951,950,1,0,0,0,951,
        952,1,0,0,0,952,953,1,0,0,0,953,987,5,69,0,0,954,955,10,4,0,0,955,
        956,5,68,0,0,956,958,5,47,0,0,957,959,3,126,63,0,958,957,1,0,0,0,
        958,959,1,0,0,0,959,960,1,0,0,0,960,961,3,54,27,0,961,962,5,69,0,
        0,962,987,1,0,0,0,963,964,10,3,0,0,964,965,5,68,0,0,965,966,3,126,
        63,0,966,967,5,47,0,0,967,968,3,54,27,0,968,969,5,69,0,0,969,987,
        1,0,0,0,970,971,10,2,0,0,971,972,5,68,0,0,972,973,5,82,0,0,973,987,
        5,69,0,0,974,975,10,1,0,0,975,977,5,66,0,0,976,978,3,128,64,0,977,
        976,1,0,0,0,977,978,1,0,0,0,978,979,1,0,0,0,979,983,5,67,0,0,980,
        982,3,114,57,0,981,980,1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,
        984,1,0,0,0,984,987,1,0,0,0,985,983,1,0,0,0,986,945,1,0,0,0,986,
        954,1,0,0,0,986,963,1,0,0,0,986,970,1,0,0,0,986,974,1,0,0,0,987,
        990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,141,1,0,0,0,990,
        988,1,0,0,0,991,997,5,112,0,0,992,993,5,112,0,0,993,994,5,66,0,0,
        994,995,5,112,0,0,995,997,5,67,0,0,996,991,1,0,0,0,996,992,1,0,0,
        0,997,143,1,0,0,0,998,1008,3,54,27,0,999,1001,5,70,0,0,1000,1002,
        3,146,73,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1004,1,0,0,0,
        1003,1005,5,95,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,
        1,0,0,0,1006,1008,5,71,0,0,1007,998,1,0,0,0,1007,999,1,0,0,0,1008,
        145,1,0,0,0,1009,1011,3,148,74,0,1010,1009,1,0,0,0,1010,1011,1,0,
        0,0,1011,1012,1,0,0,0,1012,1020,3,144,72,0,1013,1015,5,95,0,0,1014,
        1016,3,148,74,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,
        0,0,0,1017,1019,3,144,72,0,1018,1013,1,0,0,0,1019,1022,1,0,0,0,1020,
        1018,1,0,0,0,1020,1021,1,0,0,0,1021,147,1,0,0,0,1022,1020,1,0,0,
        0,1023,1024,3,150,75,0,1024,1025,5,96,0,0,1025,149,1,0,0,0,1026,
        1028,3,152,76,0,1027,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1027,1,
        0,0,0,1029,1030,1,0,0,0,1030,151,1,0,0,0,1031,1032,5,68,0,0,1032,
        1033,3,60,30,0,1033,1034,5,69,0,0,1034,1038,1,0,0,0,1035,1036,5,
        110,0,0,1036,1038,5,112,0,0,1037,1031,1,0,0,0,1037,1035,1,0,0,0,
        1038,153,1,0,0,0,1039,1040,5,64,0,0,1040,1041,5,66,0,0,1041,1042,
        3,60,30,0,1042,1044,5,95,0,0,1043,1045,5,115,0,0,1044,1043,1,0,0,
        0,1045,1046,1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1048,
        1,0,0,0,1048,1049,5,67,0,0,1049,1050,5,94,0,0,1050,155,1,0,0,0,1051,
        1089,3,158,79,0,1052,1089,3,160,80,0,1053,1089,3,166,83,0,1054,1089,
        3,168,84,0,1055,1089,3,170,85,0,1056,1089,3,178,89,0,1057,1058,7,
        19,0,0,1058,1059,7,20,0,0,1059,1068,5,66,0,0,1060,1065,3,50,25,0,
        1061,1062,5,95,0,0,1062,1064,3,50,25,0,1063,1061,1,0,0,0,1064,1067,
        1,0,0,0,1065,1063,1,0,0,0,1065,1066,1,0,0,0,1066,1069,1,0,0,0,1067,
        1065,1,0,0,0,1068,1060,1,0,0,0,1068,1069,1,0,0,0,1069,1083,1,0,0,
        0,1070,1079,5,93,0,0,1071,1076,3,50,25,0,1072,1073,5,95,0,0,1073,
        1075,3,50,25,0,1074,1072,1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,
        0,0,1076,1077,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,1079,1071,
        1,0,0,0,1079,1080,1,0,0,0,1080,1082,1,0,0,0,1081,1070,1,0,0,0,1082,
        1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,1086,1,0,0,
        0,1085,1083,1,0,0,0,1086,1087,5,67,0,0,1087,1089,5,94,0,0,1088,1051,
        1,0,0,0,1088,1052,1,0,0,0,1088,1053,1,0,0,0,1088,1054,1,0,0,0,1088,
        1055,1,0,0,0,1088,1056,1,0,0,0,1088,1057,1,0,0,0,1089,157,1,0,0,
        0,1090,1091,5,112,0,0,1091,1093,5,93,0,0,1092,1094,3,156,78,0,1093,
        1092,1,0,0,0,1093,1094,1,0,0,0,1094,1104,1,0,0,0,1095,1096,5,24,
        0,0,1096,1097,3,60,30,0,1097,1098,5,93,0,0,1098,1099,3,156,78,0,
        1099,1104,1,0,0,0,1100,1101,5,28,0,0,1101,1102,5,93,0,0,1102,1104,
        3,156,78,0,1103,1090,1,0,0,0,1103,1095,1,0,0,0,1103,1100,1,0,0,0,
        1104,159,1,0,0,0,1105,1107,5,70,0,0,1106,1108,3,162,81,0,1107,1106,
        1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1110,5,71,0,0,1110,
        161,1,0,0,0,1111,1113,3,164,82,0,1112,1111,1,0,0,0,1113,1114,1,0,
        0,0,1114,1112,1,0,0,0,1114,1115,1,0,0,0,1115,163,1,0,0,0,1116,1120,
        3,156,78,0,1117,1120,3,62,31,0,1118,1120,3,4,2,0,1119,1116,1,0,0,
        0,1119,1117,1,0,0,0,1119,1118,1,0,0,0,1120,165,1,0,0,0,1121,1123,
        3,58,29,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,
        1124,1125,5,94,0,0,1125,167,1,0,0,0,1126,1127,5,37,0,0,1127,1128,
        5,66,0,0,1128,1129,3,58,29,0,1129,1130,5,67,0,0,1130,1133,3,156,
        78,0,1131,1132,5,31,0,0,1132,1134,3,156,78,0,1133,1131,1,0,0,0,1133,
        1134,1,0,0,0,1134,1142,1,0,0,0,1135,1136,5,49,0,0,1136,1137,5,66,
        0,0,1137,1138,3,58,29,0,1138,1139,5,67,0,0,1139,1140,3,156,78,0,
        1140,1142,1,0,0,0,1141,1126,1,0,0,0,1141,1135,1,0,0,0,1142,169,1,
        0,0,0,1143,1144,5,55,0,0,1144,1145,5,66,0,0,1145,1146,3,58,29,0,
        1146,1147,5,67,0,0,1147,1148,3,156,78,0,1148,1164,1,0,0,0,1149,1150,
        5,29,0,0,1150,1151,3,156,78,0,1151,1152,5,55,0,0,1152,1153,5,66,
        0,0,1153,1154,3,58,29,0,1154,1155,5,67,0,0,1155,1156,5,94,0,0,1156,
        1164,1,0,0,0,1157,1158,5,35,0,0,1158,1159,5,66,0,0,1159,1160,3,172,
        86,0,1160,1161,5,67,0,0,1161,1162,3,156,78,0,1162,1164,1,0,0,0,1163,
        1143,1,0,0,0,1163,1149,1,0,0,0,1163,1157,1,0,0,0,1164,171,1,0,0,
        0,1165,1170,3,174,87,0,1166,1168,3,58,29,0,1167,1166,1,0,0,0,1167,
        1168,1,0,0,0,1168,1170,1,0,0,0,1169,1165,1,0,0,0,1169,1167,1,0,0,
        0,1170,1171,1,0,0,0,1171,1173,5,94,0,0,1172,1174,3,176,88,0,1173,
        1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1177,5,94,
        0,0,1176,1178,3,176,88,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,
        173,1,0,0,0,1179,1181,3,64,32,0,1180,1182,3,70,35,0,1181,1180,1,
        0,0,0,1181,1182,1,0,0,0,1182,175,1,0,0,0,1183,1188,3,54,27,0,1184,
        1185,5,95,0,0,1185,1187,3,54,27,0,1186,1184,1,0,0,0,1187,1190,1,
        0,0,0,1188,1186,1,0,0,0,1188,1189,1,0,0,0,1189,177,1,0,0,0,1190,
        1188,1,0,0,0,1191,1192,5,36,0,0,1192,1202,5,112,0,0,1193,1202,5,
        27,0,0,1194,1202,5,23,0,0,1195,1197,5,43,0,0,1196,1198,3,58,29,0,
        1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1202,1,0,0,0,1199,1200,
        5,36,0,0,1200,1202,3,26,13,0,1201,1191,1,0,0,0,1201,1193,1,0,0,0,
        1201,1194,1,0,0,0,1201,1195,1,0,0,0,1201,1199,1,0,0,0,1202,1203,
        1,0,0,0,1203,1204,5,94,0,0,1204,179,1,0,0,0,1205,1207,3,182,91,0,
        1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1209,
        5,0,0,1,1209,181,1,0,0,0,1210,1212,3,184,92,0,1211,1210,1,0,0,0,
        1212,1213,1,0,0,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,183,1,
        0,0,0,1215,1220,3,186,93,0,1216,1220,3,62,31,0,1217,1220,3,8,4,0,
        1218,1220,5,94,0,0,1219,1215,1,0,0,0,1219,1216,1,0,0,0,1219,1217,
        1,0,0,0,1219,1218,1,0,0,0,1220,185,1,0,0,0,1221,1223,3,64,32,0,1222,
        1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,1226,3,108,
        54,0,1225,1227,3,188,94,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,
        1228,1,0,0,0,1228,1229,3,160,80,0,1229,187,1,0,0,0,1230,1232,3,62,
        31,0,1231,1230,1,0,0,0,1232,1233,1,0,0,0,1233,1231,1,0,0,0,1233,
        1234,1,0,0,0,1234,189,1,0,0,0,155,195,203,223,230,235,240,247,253,
        257,262,266,273,282,295,299,302,305,309,313,329,334,341,349,353,
        361,368,370,378,384,398,403,412,419,427,435,443,451,459,467,475,
        483,491,500,511,520,527,532,537,542,549,556,562,593,597,606,613,
        623,627,630,637,642,646,650,655,661,668,674,694,700,705,711,731,
        736,739,746,761,773,776,778,788,792,802,806,810,816,819,826,828,
        833,837,842,847,851,855,860,868,870,877,882,886,892,895,904,909,
        912,918,934,940,943,948,951,958,977,983,986,988,996,1001,1004,1007,
        1010,1015,1020,1029,1037,1046,1065,1068,1076,1079,1083,1088,1093,
        1103,1107,1114,1119,1122,1133,1141,1163,1167,1169,1173,1177,1181,
        1188,1197,1201,1206,1213,1219,1222,1226,1233
    ]

class CParser ( Parser ):

    grammarFileName = "C.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'<-'", "'__m128'", "'__m128d'", 
                     "'__m128i'", "'__typeof__'", "'__inline__'", "'__stdcall'", 
                     "'__declspec'", "'__cdecl'", "'__clrcall'", "'__fastcall'", 
                     "'__thiscall'", "'__vectorcall'", "'__asm'", "'__attribute__'", 
                     "'__asm__'", "'__volatile__'", "<INVALID>", "'auto'", 
                     "'break'", "'case'", "'char'", "'const'", "'continue'", 
                     "'default'", "'do'", "'double'", "'else'", "'enum'", 
                     "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", 
                     "'int'", "'long'", "'register'", "'restrict'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", 
                     "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
                     "'volatile'", "'while'", "'_Alignas'", "'_Alignof'", 
                     "'_Atomic'", "'_Bool'", "'_Complex'", "'_Generic'", 
                     "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
                     "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WhiteSpace", "Auto", "Break", "Case", 
                      "Char", "Const", "Continue", "Default", "Do", "Double", 
                      "Else", "Enum", "Extern", "Float", "For", "Goto", 
                      "If", "Inline", "Int", "Long", "Register", "Restrict", 
                      "Return", "Short", "Signed", "Sizeof", "Static", "Struct", 
                      "Switch", "Typedef", "Union", "Unsigned", "Void", 
                      "Volatile", "While", "Alignas", "Alignof", "Atomic", 
                      "Bool", "Complex", "Generic", "Imaginary", "Noreturn", 
                      "StaticAssert", "ThreadLocal", "LeftParen", "RightParen", 
                      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
                      "Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
                      "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
                      "Caret", "Not", "Tilde", "Question", "Colon", "Semi", 
                      "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "MultiLineMacro", 
                      "Directive", "AsmBlock", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_macroName = 1
    RULE_macroBlockInvocation = 2
    RULE_macroReturnValue = 3
    RULE_macroInvocation = 4
    RULE_argumentList = 5
    RULE_argument = 6
    RULE_genericOperator = 7
    RULE_genericSelection = 8
    RULE_genericAssocList = 9
    RULE_genericAssociation = 10
    RULE_postfixExpression = 11
    RULE_argumentExpressionList = 12
    RULE_unaryExpression = 13
    RULE_unaryOperator = 14
    RULE_castExpression = 15
    RULE_multiplicativeExpression = 16
    RULE_additiveExpression = 17
    RULE_shiftExpression = 18
    RULE_relationalExpression = 19
    RULE_equalityExpression = 20
    RULE_andExpression = 21
    RULE_exclusiveOrExpression = 22
    RULE_inclusiveOrExpression = 23
    RULE_logicalAndExpression = 24
    RULE_logicalOrExpression = 25
    RULE_conditionalExpression = 26
    RULE_assignmentExpression = 27
    RULE_assignmentOperator = 28
    RULE_expression = 29
    RULE_constantExpression = 30
    RULE_declaration = 31
    RULE_declarationSpecifiers = 32
    RULE_declarationSpecifiers2 = 33
    RULE_declarationSpecifier = 34
    RULE_initDeclaratorList = 35
    RULE_initDeclarator = 36
    RULE_storageClassSpecifier = 37
    RULE_typeSpecifier = 38
    RULE_structOrUnionSpecifier = 39
    RULE_structOrUnion = 40
    RULE_structDeclarationList = 41
    RULE_structDeclaration = 42
    RULE_specifierQualifierList = 43
    RULE_structDeclaratorList = 44
    RULE_structDeclarator = 45
    RULE_enumSpecifier = 46
    RULE_enumeratorList = 47
    RULE_enumerator = 48
    RULE_enumerationConstant = 49
    RULE_atomicTypeSpecifier = 50
    RULE_typeQualifier = 51
    RULE_functionSpecifier = 52
    RULE_alignmentSpecifier = 53
    RULE_declarator = 54
    RULE_directDeclarator = 55
    RULE_vcSpecificModifer = 56
    RULE_gccDeclaratorExtension = 57
    RULE_gccAttributeSpecifier = 58
    RULE_gccAttributeList = 59
    RULE_gccAttribute = 60
    RULE_nestedParenthesesBlock = 61
    RULE_pointer = 62
    RULE_typeQualifierList = 63
    RULE_parameterTypeList = 64
    RULE_parameterList = 65
    RULE_parameterDeclaration = 66
    RULE_identifierList = 67
    RULE_typeName = 68
    RULE_abstractDeclarator = 69
    RULE_directAbstractDeclarator = 70
    RULE_typedefName = 71
    RULE_initializer = 72
    RULE_initializerList = 73
    RULE_designation = 74
    RULE_designatorList = 75
    RULE_designator = 76
    RULE_staticAssertDeclaration = 77
    RULE_statement = 78
    RULE_labeledStatement = 79
    RULE_compoundStatement = 80
    RULE_blockItemList = 81
    RULE_blockItem = 82
    RULE_expressionStatement = 83
    RULE_selectionStatement = 84
    RULE_iterationStatement = 85
    RULE_forCondition = 86
    RULE_forDeclaration = 87
    RULE_forExpression = 88
    RULE_jumpStatement = 89
    RULE_compilationUnit = 90
    RULE_translationUnit = 91
    RULE_externalDeclaration = 92
    RULE_functionDefinition = 93
    RULE_declarationList = 94

    ruleNames =  [ "primaryExpression", "macroName", "macroBlockInvocation", 
                   "macroReturnValue", "macroInvocation", "argumentList", 
                   "argument", "genericOperator", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "vcSpecificModifer", "gccDeclaratorExtension", "gccAttributeSpecifier", 
                   "gccAttributeList", "gccAttribute", "nestedParenthesesBlock", 
                   "pointer", "typeQualifierList", "parameterTypeList", 
                   "parameterList", "parameterDeclaration", "identifierList", 
                   "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    WhiteSpace=21
    Auto=22
    Break=23
    Case=24
    Char=25
    Const=26
    Continue=27
    Default=28
    Do=29
    Double=30
    Else=31
    Enum=32
    Extern=33
    Float=34
    For=35
    Goto=36
    If=37
    Inline=38
    Int=39
    Long=40
    Register=41
    Restrict=42
    Return=43
    Short=44
    Signed=45
    Sizeof=46
    Static=47
    Struct=48
    Switch=49
    Typedef=50
    Union=51
    Unsigned=52
    Void=53
    Volatile=54
    While=55
    Alignas=56
    Alignof=57
    Atomic=58
    Bool=59
    Complex=60
    Generic=61
    Imaginary=62
    Noreturn=63
    StaticAssert=64
    ThreadLocal=65
    LeftParen=66
    RightParen=67
    LeftBracket=68
    RightBracket=69
    LeftBrace=70
    RightBrace=71
    Less=72
    LessEqual=73
    Greater=74
    GreaterEqual=75
    LeftShift=76
    RightShift=77
    Plus=78
    PlusPlus=79
    Minus=80
    MinusMinus=81
    Star=82
    Div=83
    Mod=84
    And=85
    Or=86
    AndAnd=87
    OrOr=88
    Caret=89
    Not=90
    Tilde=91
    Question=92
    Colon=93
    Semi=94
    Comma=95
    Assign=96
    StarAssign=97
    DivAssign=98
    ModAssign=99
    PlusAssign=100
    MinusAssign=101
    LeftShiftAssign=102
    RightShiftAssign=103
    AndAssign=104
    XorAssign=105
    OrAssign=106
    Equal=107
    NotEqual=108
    Arrow=109
    Dot=110
    Ellipsis=111
    Identifier=112
    Constant=113
    DigitSequence=114
    StringLiteral=115
    MultiLineMacro=116
    Directive=117
    AsmBlock=118
    Whitespace=119
    Newline=120
    BlockComment=121
    LineComment=122

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(CParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.match(CParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 193 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 192
                    self.match(CParser.StringLiteral)
                    self.state = 195 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==115):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 197
                self.match(CParser.LeftParen)
                self.state = 198
                self.expression()
                self.state = 199
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 201
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 202
                    self.match(CParser.T__0)


                self.state = 205
                self.match(CParser.LeftParen)
                self.state = 206
                self.compoundStatement()
                self.state = 207
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 209
                self.match(CParser.T__1)
                self.state = 210
                self.match(CParser.LeftParen)
                self.state = 211
                self.unaryExpression()
                self.state = 212
                self.match(CParser.Comma)
                self.state = 213
                self.typeName()
                self.state = 214
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 216
                self.match(CParser.T__2)
                self.state = 217
                self.match(CParser.LeftParen)
                self.state = 218
                self.typeName()
                self.state = 219
                self.match(CParser.Comma)
                self.state = 220
                self.unaryExpression()
                self.state = 221
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_macroName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroName" ):
                listener.enterMacroName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroName" ):
                listener.exitMacroName(self)




    def macroName(self):

        localctx = CParser.MacroNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_macroName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroBlockInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroName(self):
            return self.getTypedRuleContext(CParser.MacroNameContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def argumentList(self):
            return self.getTypedRuleContext(CParser.ArgumentListContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_macroBlockInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroBlockInvocation" ):
                listener.enterMacroBlockInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroBlockInvocation" ):
                listener.exitMacroBlockInvocation(self)




    def macroBlockInvocation(self):

        localctx = CParser.MacroBlockInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_macroBlockInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.macroName()
            self.state = 228
            self.match(CParser.LeftParen)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648277940314566658) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2133054811531171) != 0):
                self.state = 229
                self.argumentList()


            self.state = 232
            self.match(CParser.RightParen)
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 233
                self.compoundStatement()

            elif la_ == 2:
                self.state = 234
                self.match(CParser.Semi)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroReturnValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_macroReturnValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroReturnValue" ):
                listener.enterMacroReturnValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroReturnValue" ):
                listener.exitMacroReturnValue(self)




    def macroReturnValue(self):

        localctx = CParser.MacroReturnValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_macroReturnValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 237
                self.match(CParser.StringLiteral)
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 243
            self.match(CParser.Identifier)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 244
                self.match(CParser.StringLiteral)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroName(self):
            return self.getTypedRuleContext(CParser.MacroNameContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def argumentList(self):
            return self.getTypedRuleContext(CParser.ArgumentListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_macroInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInvocation" ):
                listener.enterMacroInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInvocation" ):
                listener.exitMacroInvocation(self)




    def macroInvocation(self):

        localctx = CParser.MacroInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_macroInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.macroName()
            self.state = 251
            self.match(CParser.LeftParen)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648277940314566658) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2133054811531171) != 0):
                self.state = 252
                self.argumentList()


            self.state = 255
            self.match(CParser.RightParen)
            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 256
                self.match(CParser.Semi)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CParser.ArgumentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)




    def argumentList(self):

        localctx = CParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.argument()
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 260
                self.match(CParser.Comma)
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648277940314566658) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2133054811531171) != 0):
                    self.state = 261
                    self.argument()


                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeSpecifierContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def parameterDeclaration(self):
            return self.getTypedRuleContext(CParser.ParameterDeclarationContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def macroInvocation(self):
            return self.getTypedRuleContext(CParser.MacroInvocationContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def genericOperator(self):
            return self.getTypedRuleContext(CParser.GenericOperatorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def Return(self):
            return self.getToken(CParser.Return, 0)

        def argument(self):
            return self.getTypedRuleContext(CParser.ArgumentContext,0)


        def WhiteSpace(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.WhiteSpace)
            else:
                return self.getToken(CParser.WhiteSpace, i)

        def Goto(self):
            return self.getToken(CParser.Goto, 0)

        def getRuleIndex(self):
            return CParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = CParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.typeSpecifier()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==82:
                    self.state = 270
                    self.match(CParser.Star)
                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.parameterDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 277
                self.match(CParser.Identifier)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self.match(CParser.Constant)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 280 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 279
                    self.match(CParser.StringLiteral)
                    self.state = 282 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==115):
                        break

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 284
                self.macroInvocation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 285
                self.match(CParser.LeftBrace)
                self.state = 286
                self.typeSpecifier()
                self.state = 287
                self.match(CParser.Semi)
                self.state = 288
                self.match(CParser.RightBrace)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 290
                self.expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 291
                self.genericOperator()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 292
                self.compoundStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 293
                self.match(CParser.Return)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4648277940314566658) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2133054811531171) != 0):
                    self.state = 294
                    self.argument()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 307 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 297
                    self.match(CParser.StringLiteral)
                    self.state = 299
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 298
                        self.match(CParser.WhiteSpace)


                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2033711155142197730) != 0) or _la==112:
                        self.state = 301
                        self.typeSpecifier()


                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 304
                        self.match(CParser.WhiteSpace)


                    self.state = 309 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==115):
                        break

                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 311
                self.match(CParser.Goto)
                self.state = 312
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self):
            return self.getToken(CParser.Greater, 0)

        def Less(self):
            return self.getToken(CParser.Less, 0)

        def GreaterEqual(self):
            return self.getToken(CParser.GreaterEqual, 0)

        def LessEqual(self):
            return self.getToken(CParser.LessEqual, 0)

        def Equal(self):
            return self.getToken(CParser.Equal, 0)

        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def PlusPlus(self):
            return self.getToken(CParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CParser.MinusMinus, 0)

        def Plus(self):
            return self.getToken(CParser.Plus, 0)

        def Minus(self):
            return self.getToken(CParser.Minus, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def And(self):
            return self.getToken(CParser.And, 0)

        def AndAnd(self):
            return self.getToken(CParser.AndAnd, 0)

        def Not(self):
            return self.getToken(CParser.Not, 0)

        def Tilde(self):
            return self.getToken(CParser.Tilde, 0)

        def Arrow(self):
            return self.getToken(CParser.Arrow, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericOperator" ):
                listener.enterGenericOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericOperator" ):
                listener.exitGenericOperator(self)




    def genericOperator(self):

        localctx = CParser.GenericOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_genericOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            _la = self._input.LA(1)
            if not(_la==4 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 171816298447) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(CParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = CParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(CParser.Generic)
            self.state = 318
            self.match(CParser.LeftParen)
            self.state = 319
            self.assignmentExpression()
            self.state = 320
            self.match(CParser.Comma)
            self.state = 321
            self.genericAssocList()
            self.state = 322
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(CParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = CParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.genericAssociation()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 325
                self.match(CParser.Comma)
                self.state = 326
                self.genericAssociation()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = CParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 5, 6, 7, 8, 25, 26, 30, 32, 34, 39, 40, 42, 44, 45, 48, 51, 52, 53, 54, 58, 59, 60, 112]:
                self.state = 332
                self.typeName()
                pass
            elif token in [28]:
                self.state = 333
                self.match(CParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 336
            self.match(CParser.Colon)
            self.state = 337
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftBracket)
            else:
                return self.getToken(CParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightBracket)
            else:
                return self.getToken(CParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Dot)
            else:
                return self.getToken(CParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Arrow)
            else:
                return self.getToken(CParser.Arrow, i)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = CParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 339
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 340
                    self.match(CParser.T__0)


                self.state = 343
                self.match(CParser.LeftParen)
                self.state = 344
                self.typeName()
                self.state = 345
                self.match(CParser.RightParen)
                self.state = 346
                self.match(CParser.LeftBrace)
                self.state = 347
                self.initializerList()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 348
                    self.match(CParser.Comma)


                self.state = 351
                self.match(CParser.RightBrace)
                pass


            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 26388279107589) != 0):
                self.state = 368
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [68]:
                    self.state = 355
                    self.match(CParser.LeftBracket)
                    self.state = 356
                    self.expression()
                    self.state = 357
                    self.match(CParser.RightBracket)
                    pass
                elif token in [66]:
                    self.state = 359
                    self.match(CParser.LeftParen)
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                        self.state = 360
                        self.argumentExpressionList()


                    self.state = 363
                    self.match(CParser.RightParen)
                    pass
                elif token in [109, 110]:
                    self.state = 364
                    _la = self._input.LA(1)
                    if not(_la==109 or _la==110):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 365
                    self.match(CParser.Identifier)
                    pass
                elif token in [79]:
                    self.state = 366
                    self.match(CParser.PlusPlus)
                    pass
                elif token in [81]:
                    self.state = 367
                    self.match(CParser.MinusMinus)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.assignmentExpression()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 374
                self.match(CParser.Comma)
                self.state = 375
                self.assignmentExpression()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(CParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(CParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Sizeof)
            else:
                return self.getToken(CParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(CParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 381
                    _la = self._input.LA(1)
                    if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & 42949672961) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 386
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 61, 66, 112, 113, 115]:
                self.state = 387
                self.postfixExpression()
                pass
            elif token in [78, 80, 82, 85, 90, 91]:
                self.state = 388
                self.unaryOperator()
                self.state = 389
                self.castExpression()
                pass
            elif token in [46, 57]:
                self.state = 391
                _la = self._input.LA(1)
                if not(_la==46 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 392
                self.match(CParser.LeftParen)
                self.state = 393
                self.typeName()
                self.state = 394
                self.match(CParser.RightParen)
                pass
            elif token in [87]:
                self.state = 396
                self.match(CParser.AndAnd)
                self.state = 397
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CParser.And, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def Plus(self):
            return self.getToken(CParser.Plus, 0)

        def Minus(self):
            return self.getToken(CParser.Minus, 0)

        def Tilde(self):
            return self.getToken(CParser.Tilde, 0)

        def Not(self):
            return self.getToken(CParser.Not, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = CParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 12437) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 402
                    self.match(CParser.T__0)


                self.state = 405
                self.match(CParser.LeftParen)
                self.state = 406
                self.typeName()
                self.state = 407
                self.match(CParser.RightParen)
                self.state = 408
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 411
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Div)
            else:
                return self.getToken(CParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Mod)
            else:
                return self.getToken(CParser.Mod, i)

        def getRuleIndex(self):
            return CParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = CParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.castExpression()
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 7) != 0):
                self.state = 415
                _la = self._input.LA(1)
                if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 416
                self.castExpression()
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Plus)
            else:
                return self.getToken(CParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Minus)
            else:
                return self.getToken(CParser.Minus, i)

        def getRuleIndex(self):
            return CParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = CParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.multiplicativeExpression()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78 or _la==80:
                self.state = 423
                _la = self._input.LA(1)
                if not(_la==78 or _la==80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 424
                self.multiplicativeExpression()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftShift)
            else:
                return self.getToken(CParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightShift)
            else:
                return self.getToken(CParser.RightShift, i)

        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = CParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.additiveExpression()
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76 or _la==77:
                self.state = 431
                _la = self._input.LA(1)
                if not(_la==76 or _la==77):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 432
                self.additiveExpression()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Less)
            else:
                return self.getToken(CParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Greater)
            else:
                return self.getToken(CParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LessEqual)
            else:
                return self.getToken(CParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.GreaterEqual)
            else:
                return self.getToken(CParser.GreaterEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = CParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.shiftExpression()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 15) != 0):
                self.state = 439
                _la = self._input.LA(1)
                if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 440
                self.shiftExpression()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Equal)
            else:
                return self.getToken(CParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.NotEqual)
            else:
                return self.getToken(CParser.NotEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = CParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.relationalExpression()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107 or _la==108:
                self.state = 447
                _la = self._input.LA(1)
                if not(_la==107 or _la==108):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 448
                self.relationalExpression()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.And)
            else:
                return self.getToken(CParser.And, i)

        def getRuleIndex(self):
            return CParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = CParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.equalityExpression()
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 455
                self.match(CParser.And)
                self.state = 456
                self.equalityExpression()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def getRuleIndex(self):
            return CParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = CParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.andExpression()
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==89:
                self.state = 463
                self.match(CParser.Caret)
                self.state = 464
                self.andExpression()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Or)
            else:
                return self.getToken(CParser.Or, i)

        def getRuleIndex(self):
            return CParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = CParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.exclusiveOrExpression()
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 471
                self.match(CParser.Or)
                self.state = 472
                self.exclusiveOrExpression()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.AndAnd)
            else:
                return self.getToken(CParser.AndAnd, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = CParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.inclusiveOrExpression()
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==87:
                self.state = 479
                self.match(CParser.AndAnd)
                self.state = 480
                self.inclusiveOrExpression()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.OrOr)
            else:
                return self.getToken(CParser.OrOr, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.logicalAndExpression()
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 487
                self.match(CParser.OrOr)
                self.state = 488
                self.logicalAndExpression()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(CParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.logicalOrExpression()
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 495
                self.match(CParser.Question)
                self.state = 496
                self.expression()
                self.state = 497
                self.match(CParser.Colon)
                self.state = 498
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def macroInvocation(self):
            return self.getTypedRuleContext(CParser.MacroInvocationContext,0)


        def macroBlockInvocation(self):
            return self.getTypedRuleContext(CParser.MacroBlockInvocationContext,0)


        def macroReturnValue(self):
            return self.getTypedRuleContext(CParser.MacroReturnValueContext,0)


        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_assignmentExpression)
        try:
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.unaryExpression()
                self.state = 504
                self.assignmentOperator()
                self.state = 505
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(CParser.DigitSequence)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 508
                self.macroInvocation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 509
                self.macroBlockInvocation()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 510
                self.macroReturnValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CParser.OrAssign, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.assignmentExpression()
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 516
                    self.match(CParser.Comma)
                    self.state = 517
                    self.assignmentExpression() 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = CParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 5, 6, 7, 8, 9, 10, 11, 18, 22, 25, 26, 30, 32, 33, 34, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 63, 65, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.declarationSpecifiers()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 70368752631809) != 0):
                    self.state = 526
                    self.initDeclaratorList()


                self.state = 529
                self.match(CParser.Semi)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = CParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 534
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 537 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)




    def declarationSpecifiers2(self):

        localctx = CParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 539
                self.declarationSpecifier()
                self.state = 542 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -7098315371160793118) != 0) or _la==65 or _la==112):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_declarationSpecifier)
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 545
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 546
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 547
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 548
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = CParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.initDeclarator()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 552
                self.match(CParser.Comma)
                self.state = 553
                self.initDeclarator()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.declarator()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 560
                self.match(CParser.Assign)
                self.state = 561
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def Extern(self):
            return self.getToken(CParser.Extern, 0)

        def Static(self):
            return self.getToken(CParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(CParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(CParser.Auto, 0)

        def Register(self):
            return self.getToken(CParser.Register, 0)

        def getRuleIndex(self):
            return CParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = CParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            _la = self._input.LA(1)
            if not(((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & 8796395538433) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(CParser.Void, 0)

        def Char(self):
            return self.getToken(CParser.Char, 0)

        def Short(self):
            return self.getToken(CParser.Short, 0)

        def Int(self):
            return self.getToken(CParser.Int, 0)

        def Long(self):
            return self.getToken(CParser.Long, 0)

        def Float(self):
            return self.getToken(CParser.Float, 0)

        def Double(self):
            return self.getToken(CParser.Double, 0)

        def Signed(self):
            return self.getToken(CParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(CParser.Bool, 0)

        def Complex(self):
            return self.getToken(CParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(CParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(CParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(CParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = CParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_typeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.match(CParser.Void)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.match(CParser.Char)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 568
                self.match(CParser.Short)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 569
                self.match(CParser.Int)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 5)
                self.state = 570
                self.match(CParser.Long)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 6)
                self.state = 571
                self.match(CParser.Float)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 7)
                self.state = 572
                self.match(CParser.Double)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 8)
                self.state = 573
                self.match(CParser.Signed)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 9)
                self.state = 574
                self.match(CParser.Unsigned)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 10)
                self.state = 575
                self.match(CParser.Bool)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 11)
                self.state = 576
                self.match(CParser.Complex)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 12)
                self.state = 577
                self.match(CParser.T__4)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 13)
                self.state = 578
                self.match(CParser.T__5)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 14)
                self.state = 579
                self.match(CParser.T__6)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 15)
                self.state = 580
                self.match(CParser.T__0)
                self.state = 581
                self.match(CParser.LeftParen)
                self.state = 582
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 224) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 583
                self.match(CParser.RightParen)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 16)
                self.state = 584
                self.atomicTypeSpecifier()
                pass
            elif token in [48, 51]:
                self.enterOuterAlt(localctx, 17)
                self.state = 585
                self.structOrUnionSpecifier()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 18)
                self.state = 586
                self.enumSpecifier()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 19)
                self.state = 587
                self.typedefName()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 20)
                self.state = 588
                self.match(CParser.T__7)
                self.state = 589
                self.match(CParser.LeftParen)
                self.state = 590
                self.constantExpression()
                self.state = 591
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(CParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.structOrUnion()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 596
                    self.match(CParser.Identifier)


                self.state = 599
                self.match(CParser.LeftBrace)
                self.state = 600
                self.structDeclarationList()
                self.state = 601
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self.structOrUnion()
                self.state = 604
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(CParser.Struct, 0)

        def Union(self):
            return self.getToken(CParser.Union, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = CParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            _la = self._input.LA(1)
            if not(_la==48 or _la==51):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = CParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 610
                self.structDeclaration()
                self.state = 613 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2051729951765299682) != 0) or _la==64 or _la==112):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_structDeclaration)
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 615
                self.specifierQualifierList()
                self.state = 616
                self.structDeclaratorList()
                self.state = 617
                self.match(CParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.specifierQualifierList()
                self.state = 620
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 622
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 625
                self.typeSpecifier()
                pass

            elif la_ == 2:
                self.state = 626
                self.typeQualifier()
                pass


            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 629
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = CParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.structDeclarator()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 633
                self.match(CParser.Comma)
                self.state = 634
                self.structDeclarator()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 70368752631809) != 0):
                    self.state = 641
                    self.declarator()


                self.state = 644
                self.match(CParser.Colon)
                self.state = 645
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = CParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 648
                self.match(CParser.Enum)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 649
                    self.match(CParser.Identifier)


                self.state = 652
                self.match(CParser.LeftBrace)
                self.state = 653
                self.enumeratorList()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 654
                    self.match(CParser.Comma)


                self.state = 657
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.match(CParser.Enum)
                self.state = 660
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(CParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = CParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.enumerator()
            self.state = 668
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 664
                    self.match(CParser.Comma)
                    self.state = 665
                    self.enumerator() 
                self.state = 670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(CParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.enumerationConstant()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 672
                self.match(CParser.Assign)
                self.state = 673
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = CParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = CParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(CParser.Atomic)
            self.state = 679
            self.match(CParser.LeftParen)
            self.state = 680
            self.typeName()
            self.state = 681
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CParser.Const, 0)

        def Restrict(self):
            return self.getToken(CParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = CParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(CParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_functionSpecifier)
        try:
            self.state = 694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.match(CParser.Inline)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.match(CParser.Noreturn)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self.match(CParser.T__8)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 4)
                self.state = 688
                self.match(CParser.T__9)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 689
                self.gccAttributeSpecifier()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 6)
                self.state = 690
                self.match(CParser.T__10)
                self.state = 691
                self.match(CParser.LeftParen)
                self.state = 692
                self.match(CParser.Identifier)
                self.state = 693
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(CParser.Alignas)
            self.state = 697
            self.match(CParser.LeftParen)
            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 698
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 699
                self.constantExpression()
                pass


            self.state = 702
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==89:
                self.state = 704
                self.pointer()


            self.state = 707
            self.directDeclarator(0)
            self.state = 711
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 708
                    self.gccDeclaratorExtension() 
                self.state = 713
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def vcSpecificModifer(self):
            return self.getTypedRuleContext(CParser.VcSpecificModiferContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 715
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 716
                self.match(CParser.LeftParen)
                self.state = 717
                self.declarator()
                self.state = 718
                self.match(CParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 720
                self.match(CParser.Identifier)
                self.state = 721
                self.match(CParser.Colon)
                self.state = 722
                self.match(CParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 723
                self.vcSpecificModifer()
                self.state = 724
                self.match(CParser.Identifier)
                pass

            elif la_ == 5:
                self.state = 726
                self.match(CParser.LeftParen)
                self.state = 727
                self.vcSpecificModifer()
                self.state = 728
                self.declarator()
                self.state = 729
                self.match(CParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 776
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 733
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 734
                        self.match(CParser.LeftBracket)
                        self.state = 736
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                            self.state = 735
                            self.typeQualifierList()


                        self.state = 739
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                            self.state = 738
                            self.assignmentExpression()


                        self.state = 741
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 742
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 743
                        self.match(CParser.LeftBracket)
                        self.state = 744
                        self.match(CParser.Static)
                        self.state = 746
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                            self.state = 745
                            self.typeQualifierList()


                        self.state = 748
                        self.assignmentExpression()
                        self.state = 749
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 751
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 752
                        self.match(CParser.LeftBracket)
                        self.state = 753
                        self.typeQualifierList()
                        self.state = 754
                        self.match(CParser.Static)
                        self.state = 755
                        self.assignmentExpression()
                        self.state = 756
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 758
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 759
                        self.match(CParser.LeftBracket)
                        self.state = 761
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                            self.state = 760
                            self.typeQualifierList()


                        self.state = 763
                        self.match(CParser.Star)
                        self.state = 764
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 765
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 766
                        self.match(CParser.LeftParen)
                        self.state = 767
                        self.parameterTypeList()
                        self.state = 768
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 770
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 771
                        self.match(CParser.LeftParen)
                        self.state = 773
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==112:
                            self.state = 772
                            self.identifierList()


                        self.state = 775
                        self.match(CParser.RightParen)
                        pass

             
                self.state = 780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VcSpecificModiferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CParser.RULE_vcSpecificModifer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVcSpecificModifer" ):
                listener.enterVcSpecificModifer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVcSpecificModifer" ):
                listener.exitVcSpecificModifer(self)




    def vcSpecificModifer(self):

        localctx = CParser.VcSpecificModiferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vcSpecificModifer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.match(CParser.T__16)
                self.state = 784
                self.match(CParser.LeftParen)
                self.state = 786 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 785
                    self.match(CParser.StringLiteral)
                    self.state = 788 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==115):
                        break

                self.state = 790
                self.match(CParser.RightParen)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(CParser.T__17)
            self.state = 795
            self.match(CParser.LeftParen)
            self.state = 796
            self.match(CParser.LeftParen)
            self.state = 797
            self.gccAttributeList()
            self.state = 798
            self.match(CParser.RightParen)
            self.state = 799
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460750155939827) != 0):
                self.state = 801
                self.gccAttribute()


            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 804
                self.match(CParser.Comma)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460750155939827) != 0):
                    self.state = 805
                    self.gccAttribute()


                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 536870915) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 814
                self.match(CParser.LeftParen)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                    self.state = 815
                    self.argumentExpressionList()


                self.state = 818
                self.match(CParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(CParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = CParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752303423479) != 0):
                self.state = 826
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]:
                    self.state = 821
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==66 or _la==67:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [66]:
                    self.state = 822
                    self.match(CParser.LeftParen)
                    self.state = 823
                    self.nestedParenthesesBlock()
                    self.state = 824
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 831
                _la = self._input.LA(1)
                if not(_la==82 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                    self.state = 832
                    self.typeQualifierList()


                self.state = 837 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==82 or _la==89):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = CParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeQualifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 839
                self.typeQualifier()
                self.state = 842 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(CParser.Ellipsis, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = CParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.parameterList()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 845
                self.match(CParser.Comma)
                self.state = 846
                self.match(CParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def getRuleIndex(self):
            return CParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = CParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.parameterDeclaration()
            self.state = 860
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 850
                        self.match(CParser.RightParen)


                    self.state = 853
                    self.match(CParser.Comma)
                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==66:
                        self.state = 854
                        self.match(CParser.LeftParen)


                    self.state = 857
                    self.parameterDeclaration() 
                self.state = 862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.declarationSpecifiers()
                self.state = 864
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.declarationSpecifiers2()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8454149) != 0):
                    self.state = 867
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = CParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(CParser.Identifier)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 873
                self.match(CParser.Comma)
                self.state = 874
                self.match(CParser.Identifier)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.specifierQualifierList()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8454149) != 0):
                self.state = 881
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82 or _la==89:
                    self.state = 885
                    self.pointer()


                self.state = 888
                self.directAbstractDeclarator(0)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17 or _la==18:
                    self.state = 889
                    self.gccDeclaratorExtension()
                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 898
                self.match(CParser.LeftParen)
                self.state = 899
                self.abstractDeclarator()
                self.state = 900
                self.match(CParser.RightParen)
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 901
                        self.gccDeclaratorExtension() 
                    self.state = 906
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                pass

            elif la_ == 2:
                self.state = 907
                self.match(CParser.LeftBracket)
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                    self.state = 908
                    self.typeQualifierList()


                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                    self.state = 911
                    self.assignmentExpression()


                self.state = 914
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 915
                self.match(CParser.LeftBracket)
                self.state = 916
                self.match(CParser.Static)
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                    self.state = 917
                    self.typeQualifierList()


                self.state = 920
                self.assignmentExpression()
                self.state = 921
                self.match(CParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 923
                self.match(CParser.LeftBracket)
                self.state = 924
                self.typeQualifierList()
                self.state = 925
                self.match(CParser.Static)
                self.state = 926
                self.assignmentExpression()
                self.state = 927
                self.match(CParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 929
                self.match(CParser.LeftBracket)
                self.state = 930
                self.match(CParser.Star)
                self.state = 931
                self.match(CParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 932
                self.match(CParser.LeftParen)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -7098315371160793118) != 0) or _la==65 or _la==112:
                    self.state = 933
                    self.parameterTypeList()


                self.state = 936
                self.match(CParser.RightParen)
                self.state = 940
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 937
                        self.gccDeclaratorExtension() 
                    self.state = 942
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 988
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 986
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 945
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 946
                        self.match(CParser.LeftBracket)
                        self.state = 948
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                            self.state = 947
                            self.typeQualifierList()


                        self.state = 951
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                            self.state = 950
                            self.assignmentExpression()


                        self.state = 953
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 954
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 955
                        self.match(CParser.LeftBracket)
                        self.state = 956
                        self.match(CParser.Static)
                        self.state = 958
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 306249172774813696) != 0):
                            self.state = 957
                            self.typeQualifierList()


                        self.state = 960
                        self.assignmentExpression()
                        self.state = 961
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 963
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 964
                        self.match(CParser.LeftBracket)
                        self.state = 965
                        self.typeQualifierList()
                        self.state = 966
                        self.match(CParser.Static)
                        self.state = 967
                        self.assignmentExpression()
                        self.state = 968
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 970
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 971
                        self.match(CParser.LeftBracket)
                        self.state = 972
                        self.match(CParser.Star)
                        self.state = 973
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 974
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 975
                        self.match(CParser.LeftParen)
                        self.state = 977
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -7098315371160793118) != 0) or _la==65 or _la==112:
                            self.state = 976
                            self.parameterTypeList()


                        self.state = 979
                        self.match(CParser.RightParen)
                        self.state = 983
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 980
                                self.gccDeclaratorExtension() 
                            self.state = 985
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                        pass

             
                self.state = 990
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = CParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_typedefName)
        try:
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 992
                self.match(CParser.Identifier)
                self.state = 993
                self.match(CParser.LeftParen)
                self.state = 994
                self.match(CParser.Identifier)
                self.state = 995
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 1007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 46, 57, 61, 66, 78, 79, 80, 81, 82, 85, 87, 90, 91, 112, 113, 114, 115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.assignmentExpression()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.match(CParser.LeftBrace)
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1073123401789461) != 0):
                    self.state = 1000
                    self.initializerList()


                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1003
                    self.match(CParser.Comma)


                self.state = 1006
                self.match(CParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitializerContext)
            else:
                return self.getTypedRuleContext(CParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignationContext)
            else:
                return self.getTypedRuleContext(CParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = CParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==110:
                self.state = 1009
                self.designation()


            self.state = 1012
            self.initializer()
            self.state = 1020
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1013
                    self.match(CParser.Comma)
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68 or _la==110:
                        self.state = 1014
                        self.designation()


                    self.state = 1017
                    self.initializer() 
                self.state = 1022
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def getRuleIndex(self):
            return CParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.designatorList()
            self.state = 1024
            self.match(CParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(CParser.DesignatorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = CParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1026
                self.designator()
                self.state = 1029 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==68 or _la==110):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CParser.Dot, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_designator)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.match(CParser.LeftBracket)
                self.state = 1032
                self.constantExpression()
                self.state = 1033
                self.match(CParser.RightBracket)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(CParser.Dot)
                self.state = 1036
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(CParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(CParser.StaticAssert)
            self.state = 1040
            self.match(CParser.LeftParen)
            self.state = 1041
            self.constantExpression()
            self.state = 1042
            self.match(CParser.Comma)
            self.state = 1044 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1043
                self.match(CParser.StringLiteral)
                self.state = 1046 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==115):
                    break

            self.state = 1048
            self.match(CParser.RightParen)
            self.state = 1049
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Colon)
            else:
                return self.getToken(CParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1051
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1052
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1053
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1054
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1055
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1056
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1057
                _la = self._input.LA(1)
                if not(_la==17 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1058
                _la = self._input.LA(1)
                if not(_la==20 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1059
                self.match(CParser.LeftParen)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                    self.state = 1060
                    self.logicalOrExpression()
                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==95:
                        self.state = 1061
                        self.match(CParser.Comma)
                        self.state = 1062
                        self.logicalOrExpression()
                        self.state = 1067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 1070
                    self.match(CParser.Colon)
                    self.state = 1079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                        self.state = 1071
                        self.logicalOrExpression()
                        self.state = 1076
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==95:
                            self.state = 1072
                            self.match(CParser.Comma)
                            self.state = 1073
                            self.logicalOrExpression()
                            self.state = 1078
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1086
                self.match(CParser.RightParen)
                self.state = 1087
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Case(self):
            return self.getToken(CParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = CParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_labeledStatement)
        try:
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.match(CParser.Identifier)
                self.state = 1091
                self.match(CParser.Colon)
                self.state = 1093
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1092
                    self.statement()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.match(CParser.Case)
                self.state = 1096
                self.constantExpression()
                self.state = 1097
                self.match(CParser.Colon)
                self.state = 1098
                self.statement()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1100
                self.match(CParser.Default)
                self.state = 1101
                self.match(CParser.Colon)
                self.state = 1102
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = CParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(CParser.LeftBrace)
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686020578144274) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4222125936721991) != 0):
                self.state = 1106
                self.blockItemList()


            self.state = 1109
            self.match(CParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext,i)


        def getRuleIndex(self):
            return CParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = CParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1111
                self.blockItem()
                self.state = 1114 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686020578144274) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4222125936721991) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def macroBlockInvocation(self):
            return self.getTypedRuleContext(CParser.MacroBlockInvocationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_blockItem)
        try:
            self.state = 1119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1118
                self.macroBlockInvocation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                self.state = 1121
                self.expression()


            self.state = 1124
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CParser.If, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StatementContext)
            else:
                return self.getTypedRuleContext(CParser.StatementContext,i)


        def Else(self):
            return self.getToken(CParser.Else, 0)

        def Switch(self):
            return self.getToken(CParser.Switch, 0)

        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selectionStatement)
        try:
            self.state = 1141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.match(CParser.If)
                self.state = 1127
                self.match(CParser.LeftParen)
                self.state = 1128
                self.expression()
                self.state = 1129
                self.match(CParser.RightParen)
                self.state = 1130
                self.statement()
                self.state = 1133
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1131
                    self.match(CParser.Else)
                    self.state = 1132
                    self.statement()


                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.match(CParser.Switch)
                self.state = 1136
                self.match(CParser.LeftParen)
                self.state = 1137
                self.expression()
                self.state = 1138
                self.match(CParser.RightParen)
                self.state = 1139
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CParser.While, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Do(self):
            return self.getToken(CParser.Do, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def For(self):
            return self.getToken(CParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(CParser.ForConditionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_iterationStatement)
        try:
            self.state = 1163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.match(CParser.While)
                self.state = 1144
                self.match(CParser.LeftParen)
                self.state = 1145
                self.expression()
                self.state = 1146
                self.match(CParser.RightParen)
                self.state = 1147
                self.statement()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1149
                self.match(CParser.Do)
                self.state = 1150
                self.statement()
                self.state = 1151
                self.match(CParser.While)
                self.state = 1152
                self.match(CParser.LeftParen)
                self.state = 1153
                self.expression()
                self.state = 1154
                self.match(CParser.RightParen)
                self.state = 1155
                self.match(CParser.Semi)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1157
                self.match(CParser.For)
                self.state = 1158
                self.match(CParser.LeftParen)
                self.state = 1159
                self.forCondition()
                self.state = 1160
                self.match(CParser.RightParen)
                self.state = 1161
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Semi)
            else:
                return self.getToken(CParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(CParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = CParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1165
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                    self.state = 1166
                    self.expression()


                pass


            self.state = 1171
            self.match(CParser.Semi)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                self.state = 1172
                self.forExpression()


            self.state = 1175
            self.match(CParser.Semi)
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                self.state = 1176
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = CParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.declarationSpecifiers()
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 70368752631809) != 0):
                self.state = 1180
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = CParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.assignmentExpression()
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 1184
                self.match(CParser.Comma)
                self.state = 1185
                self.assignmentExpression()
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Goto(self):
            return self.getToken(CParser.Goto, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Continue(self):
            return self.getToken(CParser.Continue, 0)

        def Break(self):
            return self.getToken(CParser.Break, 0)

        def Return(self):
            return self.getToken(CParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1191
                self.match(CParser.Goto)
                self.state = 1192
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1193
                self.match(CParser.Continue)
                pass

            elif la_ == 3:
                self.state = 1194
                self.match(CParser.Break)
                pass

            elif la_ == 4:
                self.state = 1195
                self.match(CParser.Return)
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2450028566033727502) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1055531215745025) != 0):
                    self.state = 1196
                    self.expression()


                pass

            elif la_ == 5:
                self.state = 1199
                self.match(CParser.Goto)
                self.state = 1200
                self.unaryExpression()
                pass


            self.state = 1203
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -7098315371160666142) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 281476084269063) != 0):
                self.state = 1205
                self.translationUnit()


            self.state = 1208
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = CParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1210
                self.externalDeclaration()
                self.state = 1213 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -7098315371160666142) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 281476084269063) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(CParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def macroInvocation(self):
            return self.getTypedRuleContext(CParser.MacroInvocationContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)




    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externalDeclaration)
        try:
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1216
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1217
                self.macroInvocation()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1218
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1221
                self.declarationSpecifiers()


            self.state = 1224
            self.declarator()
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -7098315371160793118) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 281474976710659) != 0):
                self.state = 1225
                self.declarationList()


            self.state = 1228
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = CParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1230
                self.declaration()
                self.state = 1233 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -7098315371160793118) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 281474976710659) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[55] = self.directDeclarator_sempred
        self._predicates[70] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




